package: org.robovm.pods.firebase.firestore
include: [foundation, dispatch]
framework: FirebaseFirestore
clang_args: ['-x', 'objective-c']
headers:
    - FirebaseFirestore.h
    - FIRLoadBundleTask.h

private_typedefs:
    "FIRApp *": org.robovm.pods.firebase.core.FIRApp

typedefs: {}

enums:
    FIRFirestoreSource: {}
    FIRDocumentChangeType: {}
    FIRServerTimestampBehavior: {}
    FIRFirestoreErrorCode: { nserror: true}
    FIRLoadBundleTaskState: {}

classes:
    FIRCollectionReference:
        methods:
            '-documentWithAutoID':
                name: document
            '-documentWithPath:':
                name: document
            '-addDocumentWithData:':
                name: addDocument
            '-addDocumentWithData:completion:':
                name: addDocument
    FIRDocumentChange: {}
    FIRDocumentReference:
        methods:
            '-collectionWithPath:':
                name: collection
            '-setData:merge:':
                name: setData
            '-setData:mergeFields:':
                name: setData
            '-setData:completion:':
                name: setData
            '-setData:merge:completion:':
                name: setData
            '-setData:mergeFields:completion:':
                name: setData
            '-updateData:completion:':
                name: updateData
            '-deleteDocumentWithCompletion:':
                name: deleteDocument
            '-getDocumentWithCompletion:':
                name: getDocument
            '-getDocumentWithSource:completion:':
                name: getDocument
            '-addSnapshotListenerWithIncludeMetadataChanges:listener:':
                name: addSnapshotListener
    FIRDocumentSnapshot:
        methods:
            '-dataWithServerTimestampBehavior:':
                name: getData
            '-valueForField:serverTimestampBehavior:':
                name: getValueForField
    FIRFieldPath:
        methods:
            '-initWithFields:':
                name: init
    FIRFieldValue: {}
    FIRFirestore:
        methods:
            '-collectionWithPath:':
                name: getCollection
            '-documentWithPath:':
                name: getDocument
            '-collectionGroupWithID:':
                name: getCollectionGroup
            '-runTransactionWithBlock:completion:':
                name: runTransaction
            '-enableNetworkWithCompletion:':
                name: enableNetwork
            '-disableNetworkWithCompletion:':
                name: disableNetwork
            '-clearPersistenceWithCompletion:':
                name: clearPersistence
            '-waitForPendingWritesWithCompletion:':
                name: waitForPendingWrites
            '-terminateWithCompletion:':
                name: terminate
            '-useEmulatorWithHost:port:':
                name: useEmulator
            '-loadBundle:completion:':
                name: loadBundle
            '-loadBundleStream:completion:':
                name: loadBundleStream
            '-getQueryNamed:completion:':
                name: getQuery
            '-runTransactionWithOptions:block:completion:':
                name: runTransaction
            '-setIndexConfigurationFromJSON:completion:':
                name: setIndexConfigurationFromJSON
            '-setIndexConfigurationFromStream:completion:':
                name: setIndexConfigurationFromStream
    FIRFirestoreSettings: {}
    FIRGeoPoint:
        methods:
            '-initWithLatitude:longitude:':
                name: init
    FIRQuery:
        methods:
            '-getDocumentsWithCompletion:':
                name: getDocuments
            '-getDocumentsWithSource:completion:':
                name: getDocuments
            '-addSnapshotListenerWithIncludeMetadataChanges:listener:':
                name: addSnapshotListener
            '-queryWhereField:isEqualTo:':
                name: queryWhereFieldIsEqualTo
            '-queryWhereFieldPath:isNotEqualTo:':
                name: queryWhereFieldPathIsNotEqualTo
            '-queryWhereField:isNotEqualTo:':
                name: queryWhereFieldIsNotEqualTo
            '-queryWhereFieldPath:isEqualTo:':
                name: queryWhereFieldPathIsEqualTo
            '-queryWhereField:isLessThan:':
                name: queryWhereFieldIsLessThan
            '-queryWhereFieldPath:isLessThan:':
                name: queryWhereFieldPathIsLessThan
            '-queryWhereField:isLessThanOrEqualTo:':
                name: queryWhereFieldIsLessThanOrEqualTo
            '-queryWhereFieldPath:isLessThanOrEqualTo:':
                name: queryWhereFieldPathIsLessThanOrEqualTo
            '-queryWhereField:isGreaterThan:':
                name: queryWhereFieldIsGreaterThan
            '-queryWhereFieldPath:isGreaterThan:':
                name: queryWhereFieldPathIsGreaterThan
            '-queryWhereField:isGreaterThanOrEqualTo:':
                name: queryWhereFieldIsGreaterThanOrEqualTo
            '-queryWhereFieldPath:isGreaterThanOrEqualTo:':
                name: queryWhereFieldPathIsGreaterThanOrEqualTo
            '-queryWhereField:arrayContains:':
                name: queryWhereFieldArrayContains
            '-queryWhereFieldPath:arrayContains:':
                name: queryWhereFieldPathArrayContains
            '-queryWhereField:arrayContainsAny:':
                name: queryWhereFieldArrayContainsAny
            '-queryWhereFieldPath:arrayContainsAny:':
                name: queryWhereFieldPathArrayContainsAny
            '-queryWhereField:in:':
                name: queryWhereFieldIn
            '-queryWhereFieldPath:in:':
                name: queryWhereFieldPathIn
            '-queryWhereField:notIn:':
                name: queryWhereFieldNotIn
            '-queryWhereFieldPath:notIn:':
                name: queryWhereFieldPathNotIn
            '-queryOrderedByField:descending:':
                name: queryOrderedByFieldDescending
            '-queryOrderedByFieldPath:descending:':
                name: queryOrderedByFieldPathDescending
    FIRQueryDocumentSnapshot:
        methods:
    FIRQuerySnapshot:
        methods:
            '-documentChangesWithIncludeMetadataChanges:':
                name: getDocumentChanges
    FIRSnapshotMetadata: {}
    FIRTimestamp:
        skip_def_constructor: true
        methods:
            '-initWithSeconds:nanoseconds:':
                name: init
            '+timestampWithSeconds:nanoseconds:':
                exclude: true
            '+timestampWithDate:':
                name: create
                constructor: true
            '+timestamp':
                name: create
                constructor: true
    FIRTransaction:
        methods:
            '-setData:forDocument:':
                name: setData
            '-setData:forDocument:merge:':
                name: setData
            '-setData:forDocument:mergeFields:':
                name: setData
            '-updateData:forDocument:':
                name: updateData
            '-getDocument:error:':
                name: getDocument
                throws: NSErrorException
    FIRWriteBatch:
        methods:
            '-setData:forDocument:':
                name: setData
            '-setData:forDocument:merge:':
                name: setData
            '-setData:forDocument:mergeFields:':
                name: setData
            '-updateData:forDocument:':
                name: updateData
            '-commitWithCompletion:':
                name: commit
    FIRLoadBundleTask:
        methods:
            '-removeObserverWithHandle:':
                name: removeObserver
    FIRLoadBundleTaskProgress: {}
    FIRTransactionOptions: {}

protocols:
    FIRListenerRegistration: {}

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Function_#{g[0]}'

values:
    FIRFirestoreErrorDomain:
        class: FIRFirestoreErrorCode
        name: getClassDomain
    kFIRFirestoreCacheSizeUnlimited:
        class: FIRFirestoreSettings
        name: FirestoreCacheSizeUnlimited

    # Make sure we don't miss any values if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Value_#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Constant__#{g[0]}'
