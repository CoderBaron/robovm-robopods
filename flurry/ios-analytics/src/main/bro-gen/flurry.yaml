package: org.robovm.pods.flurry.analytics
framework: Flurry
include: [foundation, dispatch, storekit]
clang_args: ['-x', 'objective-c']
headers: 
    - Flurry.h
    - Flurry.h
    - FlurryCCPA.h
    - FlurryConsent.h
    - FlurrySessionBuilder.h
    - FlurryUserProperties.h
    - FlurrySKAdNetwork.h
enums:
    FlurryLogLevel: {}
    FlurryEventRecordStatus: {prefix: FlurryEvent}
    FlurrySyndicationEvent: {prefix: FlurrySyndication}
    FlurryTransactionRecordStatus: {prefix: FlurryTransaction}
    FlurryPaymentTransactionState: {}
    FlurryConversionValueEventType: {}
private_typedefs:
    'SKPaymentTransaction *': SKPaymentTransaction
classes:
    Flurry:
        methods:
            '+setDelegate:withCallbackQueue:':
                name: setDelegate
            '+startSession:withOptions:':
                name: startSession
            '+startSession:withOptions:withSessionBuilder:':
                name: startSession
            '+startSession:withSessionBuilder:':
                name: startSession
            '+addSessionOrigin:withDeepLink:':
                name: addSessionOrigin
            '+addOrigin:withVersion:':
                name: addOrigin
            '+addOrigin:withVersion:withParameters:':
                name: addOrigin
            '+logEvent:withParameters:':
                name: logEvent
            '+logEvent:syndicationID:parameters:':
                name: logEvent
            '+logPaymentTransaction:statusCallback:':
                name: logPaymentTransaction
            '+logPaymentTransactionParamsWithTransactionId:productId:quantity:price:currency:productName:transactionState:userDefinedParams:statusCallback:':
                name: logPaymentTransactionParams
            '+logFlurryPaymentTransactionParamsWithTransactionId:productId:quantity:price:currency:productName:transactionState:userDefinedParams:statusCallback:':
                name: logFlurryPaymentTransactionParams
            '+logEvent:timed:':
                name: logEvent
            '+logEvent:withParameters:timed:':
                name: logEvent
            '+endTimedEvent:withParameters:':
                name: endTimedEvent
            '+logError:message:exception:':
                name: logError
            '+logError:message:exception:withParameters:':
                name: logError
            '+logError:message:error:':
                name: logError
            '+logError:message:error:withParameters:':
                name: logError
    FlurryCCPA: {}
    FlurryConsent:
        methods:
            '-initWithGDPRScope:andConsentStrings:':
                name: init
    FlurrySessionBuilder: {}
    FlurryUserProperties:
        methods:
            '+set:values:':
                name: set
            '+set:value:':
                name: set
            '+add:values:':
                name: add
            '+add:value:':
                name: add
            '+remove:values:':
                name: remove
            '+remove:value:':
                name: remove
    FlurrySKAdNetwork:
        methods:
            '+flurryUpdateConversionValueWithEvent:':
                name: flurryUpdateConversionValue
protocols:
    FlurryDelegate:
        methods:
            '-flurrySessionDidCreateWithInfo:':
                name: flurrySessionDidCreate

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Function_#{g[0]}'

values:
    kSyndication(.*):
        class: Flurry
        static_class: Syndication
        name: '#{g[0]}'
    FlurryProperty(.*):
        class: Flurry
        static_class: Properties
        name: '#{g[0]}'

    # Make sure we don't miss any values if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Value_#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Constant__#{g[0]}'
