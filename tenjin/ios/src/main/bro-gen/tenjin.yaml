package: org.robovm.pods.tenjin
framework: TenjinSDK
include: [foundation, uikit, storekit, coredata, dispatch]
clang_args: ['-x', 'objective-c']
headers:
    - "#include <TargetConditionals.h>"
    - "#import <UIKit/UIKit.h>"
    - "#import <CoreData/CoreData.h>"
    - TenjinSDK.h
    - TenjinSDK-Swift.h
    - TenjinSDK+AdMobILRD.h
    - TenjinSDK+AppLovinILRD.h
    - TenjinSDK+CASILRD.h
    - TenjinSDK+HyperBidILRD.h
    - TenjinSDK+IronSourceILRD.h
    - TenjinSDK+TopOnILRD.h
    - TenjinSDK+TradPlusILRD.h
enums:
    PurposeConsentStatus: {}

private_typedefs:
    'GADAdValue *': org.robovm.pods.google.mobileads.GADAdValue

classes:
    TenjinSDK:
        methods:
            '-initWithToken:andSharedSecret:andAppSubversion:andDeferredDeeplink:ping:':
                name: init
            '+init:andSharedSecret:':
                name: init
            '+init:andAppSubversion:':
                name: init
            '+init:andSharedSecret:andAppSubversion:':
                name: init
            '+initialize:andSharedSecret:':
                name: initialize
            '+initialize:andAppSubversion:':
                name: initialize
            '+initialize:andSharedSecret:andAppSubversion:':
                name: initialize
            '+getInstance:andSharedSecret:':
                name: getInstance
            '+getInstance:andAppSubversion:':
                name: getInstance
            '+getInstance:andSharedSecret:andAppSubversion:':
                name: getInstance
            '+sharedInstanceWithToken:':
                name: sharedInstance
            '+sharedInstanceWithToken:andDeferredDeeplink:':
                name: sharedInstance
            '+connectWithDeferredDeeplink:':
                name: connect
            '+sendEventWithName:':
                name: sendEvent
            '+sendEventWithName:andEventValue:':
                name: sendEvent
            '+transaction:andReceipt:':
                name: transaction
            '+transactionWithProductName:andCurrencyCode:andQuantity:andUnitPrice:':
                name: transaction
            '+transactionWithProductName:andCurrencyCode:andQuantity:andUnitPrice:andTransactionId:andReceipt:':
                name: transaction
            '+transactionWithProductName:andCurrencyCode:andQuantity:andUnitPrice:andTransactionId:andBase64Receipt:':
                name: transaction
            '+setValue:forKey:':
                name: setValue
            '+requestTrackingAuthorizationWithCompletionHandler:':
                name: requestTrackingAuthorization
            '+handleAdMobILRD::':
                name: handleAdMobILRD
            '+updatePostbackConversionValue:coarseValue:':
                name: updatePostbackConversion
            '+updatePostbackConversionValue:coarseValue:lockWindow:':
                name: updatePostbackConversion
            '-setGoogleDMAParametersWithAdPersonalization:adUserData:':
                name: setGoogleDMAParameters
    TJNHTTPClient:
        methods:
            '-initWithApiKey:':
                name: init
    QueueEvent: {}
    RequestHelper:
        methods:
            '-initWithApiKey:':
                name: init
            '-initWithApiKey:client:':
                name: init
            '-handlePostRequestWithEndpoint:params:':
                name: handlePostRequest
    TenjinRepository:
        methods:
            '-initWithApiKey:':
                name: init
            '-initWithApiKey:client:':
                name: init
    TenjinDatasource: { }
    TenjinImpl:
        methods:
            '-initWithToken:andSharedSecret:andAppSubversion:ping:requestSender:':
                name: init
            '-initWithToken:andSharedSecret:andAppSubversion:ping:':
                name: init
            '-pingWithDeferredDeeplink:':
                name: ping
            '-pingEventWithName:':
                name: pingEvent
            '-pingEventWithName:andIntegerValue:':
                name: pingEvent
            '-transactionWithProductName:andCurrencyCode:andQuantity:andUnitPrice:':
                name: transaction
            '-deviceDataWithEvent:':
                name: deviceData
            '-transaction:andReceipt:':
                name: transaction
            '-transactionWithProductName:andCurrencyCode:andQuantity:andUnitPrice:andTransactionId:andReceipt:':
                name: transaction
            '-transactionWithProductName:andCurrencyCode:andQuantity:andUnitPrice:andTransactionId:andBase64Receipt:':
                name: transaction
            '-trackConversionValue:coarseValue:lockWindow:hasLockWindow:':
                name: trackConversionValue
            '-setValue:forKey:':
                name: setValue
            '+setBooleanValue:key:':
                name: setBooleanValue

    GDPRHelper: {}
protocols:
    TJNRequestSender:
        methods:
            '-postWithUrl:body:headers:':
                name: post
            '-method:url:body:':
                name: method
            '-method:url:body:headers:':
                name: method
            '-method:url:body:headers:completionBlock:':
                name: method

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Function_#{g[0]}'

values:

    # Make sure we don't miss any values if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Value_#{g[0]}'

constants:
    SWIFT_.*:
        exclude: true

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Constant__#{g[0]}'
