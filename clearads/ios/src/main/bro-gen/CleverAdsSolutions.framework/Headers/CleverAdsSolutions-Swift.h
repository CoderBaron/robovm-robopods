#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef CLEVERADSSOLUTIONS_SWIFT_H
#define CLEVERADSSOLUTIONS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <CleverAdsSolutions/CleverAdsSolutions.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CleverAdsSolutions",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class CASSettings;
@class CASTargetingOptions;
@class CASMediationManager;
@class CASManagerBuilder;
@class NSString;
enum CASError : NSInteger;

SWIFT_CLASS_NAMED("CAS")
@interface CAS : NSObject
/// Get singleton instance to configure all mediation managers
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSettings * _Nonnull settings;)
+ (CASSettings * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// You can now easily tailor the way you serve your ads to fit a specific audience!
/// You’ll need to inform our servers of the users details
/// so the SDK will know to serve ads according to the segment the user belongs to.
/// <em>Attention:</em> Must be set before initializing the SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASTargetingOptions * _Nonnull targetingOptions;)
+ (CASTargetingOptions * _Nonnull)targetingOptions SWIFT_WARN_UNUSED_RESULT;
/// Get last created <code>CASMediationManager</code> by <code>CAS.create()</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASMediationManager * _Nullable manager;)
+ (CASMediationManager * _Nullable)manager SWIFT_WARN_UNUSED_RESULT;
+ (CASManagerBuilder * _Nonnull)buildManager SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Call Integration Helper and check current integration in console.
/// Log tag: [CASIntegrationHelper]
+ (void)validateIntegration;
+ (NSString * _Nonnull)getMessageOf:(enum CASError)error SWIFT_WARN_UNUSED_RESULT;
+ (enum CASError)getErrorFor:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CASMediationAdapter;

SWIFT_PROTOCOL_NAMED("CASAdapterFactory")
@protocol CASAdapterFactory <NSObject>
- (nonnull instancetype)init;
- (CASMediationAdapter * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
@end

enum CASType : NSInteger;
enum CASPriceAccuracy : NSInteger;

SWIFT_PROTOCOL_NAMED("CASImpression")
@protocol CASStatusHandler
/// The Format Type of the impression
@property (nonatomic, readonly) enum CASType adType;
/// The mediated network’s name that purchased the impression.
/// All mediation network constants from <code>CASNetwork</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull network;
/// The Cost Per Mille estimated impressions of the ad in USD.
/// The value accuracy is returned in the <code>priceAccuracy</code> property.
@property (nonatomic, readonly) double cpm;
/// Accuracy of the cpm value. May return one of the following:
@property (nonatomic, readonly) enum CASPriceAccuracy priceAccuracy;
/// Version of the network SDK rendering the ad.
@property (nonatomic, readonly, copy) NSString * _Nonnull versionInfo;
/// The creative id tied to the ad, if available. May be nil.
/// You can report creative issues to our Ad review team using this id.
@property (nonatomic, readonly, copy) NSString * _Nullable creativeIdentifier;
/// Internal demand source name in CAS database.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The amount of impressions of all ad formats to the current user for all sessions.
@property (nonatomic, readonly) NSInteger impressionDepth;
/// The total revenue in USD from impressions of all ad formats to the current user for all sessions.
@property (nonatomic, readonly) double lifetimeRevenue;
/// Not used deprecated API
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
/// Not used deprecated API
@property (nonatomic, readonly, copy) NSString * _Nonnull error;
/// Not used deprecated API
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
/// Not used deprecated API
- (void)toggleIgnoreMode;
@end


SWIFT_CLASS_NAMED("CASMediationUnit")
@interface CASMediationUnit : NSObject <CASStatusHandler>
@property (nonatomic, copy) NSString * _Nullable creativeIdentifier;
@property (nonatomic) double cpm;
@property (nonatomic, readonly, copy) NSString * _Nonnull network;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, copy) NSString * _Nonnull error;
@property (nonatomic) enum CASPriceAccuracy priceAccuracy;
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
@property (nonatomic, readonly) enum CASType adType;
@property (nonatomic, readonly, copy) NSString * _Nonnull versionInfo;
- (void)toggleIgnoreMode;
@property (nonatomic, readonly) NSInteger impressionDepth;
@property (nonatomic, readonly) double lifetimeRevenue;
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Mediation agent request call stack
/// <ol>
///   <li>
///     If [isAdCached] return false
///   </li>
///   <li>
///     [requestAd]
///   </li>
///   <li>
///     Callback [onAdLoaded] OR [onAdFailedToLoad]
///   </li>
/// </ol>
/// Mediation agent impression call stack
/// <ol>
///   <li>
///     If [isAdCached] return true
///   </li>
///   <li>
///     [showAd]
///   </li>
///   <li>
///     Callback [onAdShown] OR [showFailed]
///   </li>
///   <li>
///     Callback [onAdClicked] when ad clicked
///   </li>
///   <li>
///     Callback [onAdCompleted] when ad video completed
///   </li>
///   <li>
///     Callback [onAdClosed]
///   </li>
///   <li>
///     [disposeAd]
///   </li>
/// </ol>
SWIFT_CLASS_NAMED("CASAgent")
@interface CASAgent : CASMediationUnit
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
- (void)toggleIgnoreMode;
@end

@protocol CASAnalyticsDelegate;

SWIFT_CLASS("_TtC18CleverAdsSolutions12CASAnalytics")
@interface CASAnalytics : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, weak) id <CASAnalyticsDelegate> _Nullable delegate;)
+ (id <CASAnalyticsDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <CASAnalyticsDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull eventNameForCrossPromo;)
+ (NSString * _Nonnull)eventNameForCrossPromo SWIFT_WARN_UNUSED_RESULT;
+ (void)setEventNameForCrossPromo:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull eventNameForImpressions;)
+ (NSString * _Nonnull)eventNameForImpressions SWIFT_WARN_UNUSED_RESULT;
+ (void)setEventNameForImpressions:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull eventNameForErrors;)
+ (NSString * _Nonnull)eventNameForErrors SWIFT_WARN_UNUSED_RESULT;
+ (void)setEventNameForErrors:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull eventNameForMediation;)
+ (NSString * _Nonnull)eventNameForMediation SWIFT_WARN_UNUSED_RESULT;
+ (void)setEventNameForMediation:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions20CASAnalyticsDelegate_")
@protocol CASAnalyticsDelegate
- (void)analyticsEvent:(NSString * _Nonnull)eventName map:(NSDictionary<NSString *, id> * _Nonnull)map;
@end

@protocol CASCallback;
@class UIViewController;

SWIFT_CLASS_NAMED("CASAppOpen")
@interface CASAppOpen : NSObject
/// Returns the ad manager ID.
@property (nonatomic, readonly, copy) NSString * _Nonnull managerId;
/// Registers a callback to be invoked when ads show and dismiss full screen content.
@property (nonatomic, weak) id <CASCallback> _Nullable contentCallback;
+ (CASAppOpen * _Nonnull)createWithManagerId:(NSString * _Nonnull)managerId SWIFT_WARN_UNUSED_RESULT;
+ (CASAppOpen * _Nonnull)createWithManager:(CASMediationManager * _Nonnull)manager SWIFT_WARN_UNUSED_RESULT;
/// Loads an AppOpenAd.
/// \param orientation The orientation that the ad will be presented in.
///
/// \param completionHandler An object that handles events for loading an app open ad
///
- (void)loadAdWithOrientation:(UIInterfaceOrientation)orientation completionHandler:(void (^ _Nonnull)(CASAppOpen * _Nonnull, NSError * _Nullable))completionHandler;
- (BOOL)isAdAvailable SWIFT_WARN_UNUSED_RESULT;
- (void)presentFromRootViewController:(UIViewController * _Nonnull)controller;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The CAS can execute callbacks on the UI or background thread.
SWIFT_PROTOCOL_NAMED("CASCallback")
@protocol CASCallback
@optional
/// Executed when the ad is displayed.
/// \param adStatus Information of displayed ad
///
- (void)willShownWithAd:(id <CASStatusHandler> _Nonnull)adStatus;
/// Executed when the ad is failed to display.
/// The Banner may automatically appear when the Ad is ready again.
/// This will trigger the <code>willShown(ad:)</code> callback again.
/// \param error Error message
///
- (void)didShowAdFailedWithError:(NSString * _Nonnull)error;
/// Executed when the user clicks on an Ad.
- (void)didClickedAd;
/// Executed when the Ad is completed.
/// Banner Ad does not use this callback.
- (void)didCompletedAd;
/// Executed when the ad is closed.
/// The Banner Ad cannot be displayed automatically after this callback for the current view.
/// If you decide to show the Banner Ad on this view then you need refresh view visibility.
- (void)didClosedAd;
@end


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions20CASAppReturnDelegate_")
@protocol CASAppReturnDelegate <CASCallback>
- (UIViewController * _Nonnull)viewControllerForPresentingAppReturnAd SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, CASAudience, "CASAudience", open) {
/// The user’s age has not been determined.
  CASAudienceUndefined = 0,
/// Audiences under the age of 13 who subject of COPPA.
/// When using this feature, a Tag For Users under the Age of Consent in Europe (TFUA) parameter
/// will be included in the ad request.
/// Also the state of GDPR and CCPA will be overridden automatically
/// to <code>CASConsentStatus.denied</code> and  <code>CASCCPAStatus.optOutSale</code>
  CASAudienceChildren = 1,
/// Audiences over the age of 13 NOT subject to the restrictions of child protection laws.
  CASAudienceNotChildren = 2,
};


SWIFT_CLASS("_TtC18CleverAdsSolutions8CASBUnit")
@interface CASBUnit : CASMediationUnit
@property (nonatomic) double cpm;
@property (nonatomic) enum CASType adType;
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
- (void)toggleIgnoreMode;
@end


SWIFT_CLASS_NAMED("CASBannerAgent")
@interface CASBannerAgent : CASAgent
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
@end

@class CASBannerView;

/// The CAS can execute callbacks on the UI or background thread.
SWIFT_PROTOCOL_NAMED("CASBannerDelegate")
@protocol CASBannerDelegate
@optional
/// Invokes this callback when ad loaded and ready to present.
- (void)bannerAdViewDidLoad:(CASBannerView * _Nonnull)view;
/// Invokes this callback when an error occurred with the ad.
/// <ul>
///   <li>
///     To see a description of the error, see <code>AdError.message</code>.
///   </li>
/// </ul>
- (void)bannerAdView:(CASBannerView * _Nonnull)adView didFailWith:(enum CASError)error;
/// Invokes this callback when the new ad will presenting for user with info about the impression.
- (void)bannerAdView:(CASBannerView * _Nonnull)adView willPresent:(id <CASStatusHandler> _Nonnull)impression;
/// Invokes this callback when a user clicks the ad.
- (void)bannerAdViewDidRecordClick:(CASBannerView * _Nonnull)adView;
@end

@class NSCoder;

SWIFT_CLASS("_TtC18CleverAdsSolutions17CASBannerInternal")
@interface CASBannerInternal : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, getter=isHidden) BOOL hidden;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)didMoveToWindow;
- (void)didMoveToSuperview;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



SWIFT_PROTOCOL_NAMED("CASPaidCallback")
@protocol CASPaidCallback <CASCallback>
- (void)didPayRevenueFor:(id <CASStatusHandler> _Nonnull)ad;
@end


@interface CASBannerInternal (SWIFT_EXTENSION(CleverAdsSolutions)) <CASPaidCallback>
- (void)didClickedAd;
- (void)didPayRevenueFor:(id <CASStatusHandler> _Nonnull)ad;
@end

@class CASSize;

SWIFT_CLASS("_TtC18CleverAdsSolutions13CASBannerView")
@interface CASBannerView : CASBannerInternal
/// Initializes and returns a banner view with the specified ad size placed at its superview’s
/// origin.
- (nonnull instancetype)initWithAdSize:(CASSize * _Nonnull)adSize manager:(CASMediationManager * _Nullable)manager;
/// Initializes and returns a banner view with the specified ad size and origin relative to the
/// banner’s superview.
- (nonnull instancetype)initWithAdSize:(CASSize * _Nonnull)adSize origin:(CGPoint)origin manager:(CASMediationManager * _Nullable)manager OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Active <code>CASMediationManager</code> to this banner view.
/// It can be automatically selected as the last active <code>CAS.manager</code> if it is NIL.
@property (nonatomic, strong) CASMediationManager * _Nullable manager;
/// Current banner ad size.
/// If autoload disabled (<code>isAutoloadEnabled = false</code>) then please call <code>loadNextAd</code> after banner size changed.
@property (nonatomic, strong) CASSize * _Nonnull adSize;
/// This view controller is used to present an overlay when the ad is clicked.
/// It should normally be set to the view controller that contains the <code>CASBannerView</code>
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// Through the use of <code>CASBannerDelegate</code>, you can listen for banner ads events.
@property (nonatomic, weak) id <CASBannerDelegate> _Nullable adDelegate;
/// Check ready banner ads
@property (nonatomic, readonly) BOOL isAdReady;
/// A Boolean value that determines whether autoloading of ads in the receiver is enabled.
/// If enabled, you do not need to call the <code>loadNextAd</code> method to load ads.
/// This value will override global state of <code>CASSettings.loadingMode</code>.
/// By default enabled if global state is NOT <code>CASSettings.setLoadingMode(CASLoadingManagerMode.Manual)</code>.
@property (nonatomic) BOOL isAutoloadEnabled;
/// Set the number of seconds an ad is displayed before a new ad is shown.
/// After the interval has passed, a new advertisement will be automatically loaded.
/// This value will override global <code>CASSettings.setBannerRefreshInterval</code>
@property (nonatomic) NSInteger refreshInterval;
/// Disable auto refresh ads.
- (void)disableAdRefresh;
/// Manual load Banner Ad or reload current loaded Ad for cancel impression.
/// If autoload disabled (<code>isAutoloadEnabled = false</code>) then you should use <code>loadNextAd</code> before present ad.
/// You can get a callback for the successful loading of an ad when set <code>adDelegate</code>
/// attention:
/// This functionality is available only after <code>CAS.create</code>
- (void)loadNextAd;
/// Destroy ad in the Banner View.
/// Call when banner ad is no longer needed.
- (void)destroy;
@end


SWIFT_CLASS("_TtC18CleverAdsSolutions16CASBridgeToBUnit")
@interface CASBridgeToBUnit : CASBUnit
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, CASCCPAStatus, "CASCCPAStatus", open) {
/// Mediation ads network behavior
  CASCCPAStatusUndefined = 0,
/// User does not consent to the sale of his or her personal information in compliance with CCPA.
  CASCCPAStatusOptOutSale = 1,
/// User consents to the sale of his or her personal information in compliance with CCPA.
  CASCCPAStatusOptInSale = 2,
};



/// Use this object for configure Consent flow dialogs for GDPR and Apple ATT request.
/// Create and attach the object to CAS initialization.
/// \code
/// CAS.buildManager()
///    .withConsentFlow(
///         CASConsentFlow()
///             .withPrivacyPolicy("https://url_to_privacy_policy")
///    )
///    .create()
///
/// \endcodeBy default, the consent flow will be shown to users who are protected by laws.
/// You can prevent us from showing the consent dialog to the user ussing followed lines:
/// \code
/// CAS.buildManager()
///     .withConsentFlow(
///         CASConsentFlow(isEnabled: false)
///     )
///     .create()
///
/// \endcode
SWIFT_CLASS_NAMED("CASConsentFlow")
@interface CASConsentFlow : NSObject
@property (nonatomic) BOOL requestGDPR;
@property (nonatomic) BOOL requestATT;
@property (nonatomic, copy) NSString * _Nullable privacyPolicyUrl;
/// Create Consent flow configuration
/// \param isEnabled If enabled then the consent flow will be shown to users who are protected by laws.
///
- (nonnull instancetype)initWithEnabled:(BOOL)isEnabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Override a link to the App’s Privacy Policy in the consent dialog.
/// \param url String of the  App’s Privacy Policy url
///
- (CASConsentFlow * _Nonnull)withPrivacyPolicy:(NSString * _Nonnull)url;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, CASConsentStatus, "CASConsentStatus", open) {
/// Mediation ads network behavior
  CASConsentStatusUndefined = 0,
/// User consents to behavioral targeting in compliance with GDPR.
  CASConsentStatusAccepted = 1,
/// User does not consent to behavioral targeting in compliance with GDPR.
  CASConsentStatusDenied = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, CASError, "CASError", open) {
  CASErrorInternalError = 0,
/// Loading ads cannot be successful without an internet connection.
  CASErrorNoConnection = 2,
/// This means we are not able to serve ads to this person.
/// Note that if you can see ads while you are testing with enabled <code>CAS.create(demoAdMode: true)</code>,
/// your implementation works correctly and people will be able to see ads in your app once it’s live.
  CASErrorNoFill = 3,
/// A configuration error has been detected in one of the mediation ad networks.
/// Please report error message to your manager support.
  CASErrorConfigurationError = 6,
/// Ad are not ready to show.
/// You need to call Load ads or use one of the automatic cache mode.
/// If you are already using automatic cache mode then just wait a little longer.
/// You can always check if ad is ready to show using methods:
/// \code
/// CASMediationManager.isInterstitialReady
/// CASMediationManager.isRewardedReady
/// CASBannerView.isAdReady
///
/// \endcode
  CASErrorNotReady = 1001,
/// The manager you want to use is not active at the moment.
/// To change the state of the manager, use method:
/// \code
/// CASMediationManager.setEnabled
///
/// \endcode
  CASErrorManagerIsDisabled = 1002,
/// Ad creative has reached its daily cap for user.
  CASErrorReachedCap = 1004,
/// There is not enough space in the current view for the selected <code>CASSize</code>.
/// Please make sure that the size of the banner container has enough free space.
/// You can choose a smaller size if necessary using  property:
/// \code
/// CASBannerView.adSize
///
/// \endcode
  CASErrorNotEnoughSpace = 1005,
/// The interval between impressions of Interstitial Ad has not yet passed.
/// To change the interval, use  method:
/// \code
/// CASSettings.setInterstitial(interval:)
///
/// \endcode
  CASErrorIntervalNotYetPassed = 2001,
/// You can not show ads because another fullscreen ad is being displayed at the moment.
/// Please check your ad call logic to eliminate duplicate impressions.
  CASErrorAlreadyDisplayed = 2002,
/// Ads cannot be shown as the application is currently not visible to the user.
  CASErrorAppIsPaused = 2003,
/// All the rootViewController parameters in Ad APIs must be provided to process ad redirects.
/// In the SDK, all redirects use the present method.
/// Therefore, make sure that the passed rootViewController parameters are not null and do not have other present controllers.
/// Otherwise the present will fail because presentedViewController already exists.
  CASErrorInvalidUIViewController = 3001,
};
static NSString * _Nonnull const CASErrorDomain = @"CleverAdsSolutions.CASError";


SWIFT_CLASS("_TtC18CleverAdsSolutions12CASException")
@interface CASException : NSError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end




SWIFT_CLASS_NAMED("CASInitialConfig")
@interface CASInitialConfig : NSObject
/// Get the CAS manager initialization error message or NULL if initialization is successful.
@property (nonatomic, readonly, copy) NSString * _Nullable error;
/// Get the initialized CAS manager.
@property (nonatomic, readonly, strong) CASMediationManager * _Nonnull manager;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("CASLastPageAdContent")
@interface CASLastPageAdContent : NSObject
/// Create Ad content to use in Last Page
/// The latest free ad page for your own promotion
/// This ad page will be displayed when there is no paid ad to show or internet availability.
/// Apply this content to <code>MediationManager.lastPageAdContent</code>
/// \param headline Enter the message that you want users to see.
///
/// \param adText Enter a description for the app being promoted. Optional property.
///
/// \param destinationURL Enter the URL that CAS will direct users to when they click the ad. This URL is not visible in the ad.
///
/// \param imageURL Enter the direct URL of the image to be used as the ad file. Optional property.
///
/// \param iconURL Enter the direct URL of the icon or logo (Small square picture). Optional property.
///
- (nonnull instancetype)initWithHeadline:(NSString * _Nonnull)headline adText:(NSString * _Nonnull)adText destinationURL:(NSString * _Nonnull)destinationURL imageURL:(NSString * _Nonnull)imageURL iconURL:(NSString * _Nonnull)iconURL OBJC_DESIGNATED_INITIALIZER;
+ (CASLastPageAdContent * _Nullable)createFrom:(NSString * _Nullable)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("CASLoadDelegate")
@protocol CASLoadDelegate
/// Executed when the ad loaded and ready to present.
/// attention:
/// Can be called from ANY Thread and not UI Thread safe.
- (void)onAdLoaded:(enum CASType)adType;
/// Executed when the ad failed to load.
/// attention:
/// Can be called from ANY Thread and not UI Thread safe.
- (void)onAdFailedToLoad:(enum CASType)adType withError:(NSString * _Nullable)error;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, CASLoadingManagerMode, "CASLoadingManagerMode", open) {
/// Automatic control loading mediation ads.
/// Provides frequent polling of mediation networks for advertising content.
/// May increase coverage with more expensive ads.
/// But this will run more background processes that slow down the application.
  CASLoadingManagerModeFastestRequests = 0,
/// Automatic control loading mediation ads.
/// Provides frequent polling of mediation networks for advertising content.
/// May increase coverage with more expensive ads.
/// But this will run more background processes that slow down the application.
  CASLoadingManagerModeFastRequests = 1,
/// Automatic control loading mediation ads.
/// Provides balanced polling rate of mediation networks for advertising content.
/// Doesn’t significantly affect application performance.
  CASLoadingManagerModeOptimal = 2,
/// Automatic control loading mediation ads.
/// Provides slow polling of mediation networks for advertising content.
/// This helps to reduce the impact of background processes on the application.
/// At the same time, do not lose much of the relevance of the high cost of advertising content.
/// Reduces memory reservations for advertising content.
  CASLoadingManagerModeHighePerformance = 3,
/// Automatic control loading mediation ads.
/// Provides slow polling of mediation networks for advertising content.
/// This helps to reduce the impact of background processes on the application.
/// At the same time, do not lose much of the relevance of the high cost of advertising content.
/// Reduces memory reservations for advertising content.
  CASLoadingManagerModeHighestPerformance = 4,
/// Manual control loading mediation ads.
/// Provides minimal impact on application performance.
/// But it requires manual preparation of advertising content for display.
/// Use ad loading methods before trying to show:
/// <code>CASMediationManager.loadInterstitial()</code>, <code>CASMediationManager.loadRewardedVideo()</code>, <code>CASBannerView.loadNextAd()</code>
/// Reduces memory reservations for advertising content.
  CASLoadingManagerModeManual = 5,
};


SWIFT_CLASS_NAMED("CASManagerBuilder")
@interface CASManagerBuilder : NSObject
/// Set handler to receive a callback after all CAS initialization processes have completed.
- (CASManagerBuilder * _Nonnull)withCompletionHandler:(void (^ _Nonnull)(CASInitialConfig * _Nonnull))handler;
/// Enable test ad mode that will always request test ads.
/// <em>Attention</em> Please remember to set False test ad mode after tests done.
- (CASManagerBuilder * _Nonnull)withTestAdMode:(BOOL)test;
/// Using <code>CASTypeFlags</code> in current session.
/// By default: All Ad types are used.
/// Set <code>CASTypeFlags.none</code> to disable all ad types requests.
- (CASManagerBuilder * _Nonnull)withAdFlags:(CASTypeFlags)adTypes;
/// The userID is a unique identifier supplied by your application and must be static for each user across sessions.
/// Your userID should not contain any personally identifiable information such as an email address, screen name.
- (CASManagerBuilder * _Nonnull)withUserID:(NSString * _Nonnull)userID;
/// Create and attach the Conset flow configuration for initialization.
/// \code
/// .withConsentFlow(
///      CASConsentFlow()
///          .withPrivacyPolicy("https://url_to_privacy_policy")
/// )
///
/// \endcodeBy default, the consent flow will be shown to users who are protected by laws.
/// You can prevent us from showing the consent dialog to the user ussing followed lines:
/// \code
/// .withConsentFlow(CASConsentFlow(isEnabled: false))
///
/// \endcode
- (CASManagerBuilder * _Nonnull)withConsentFlow:(CASConsentFlow * _Nonnull)flow;
/// Additional mediation settings.
- (CASManagerBuilder * _Nonnull)withMediationExtras:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Information about the platform on which the application runs.
/// Platforms such as Unity, Cordova, Flutter…
/// If your app only uses native android then don’t call this function.
- (CASManagerBuilder * _Nonnull)withFramework:(NSString * _Nonnull)name version:(NSString * _Nonnull)version;
/// Create new or get valid <code>CASMediationManager</code>.
/// Can be called for different identifiers to create different managers.
/// An CAS ID is a unique ID number assigned to each of your ad placements when they’re created in CAS.
/// <ul>
///   <li>
///     The CAS ID is added to your app’s code and used to identify ad requests.
///     Often the CAS ID is the same as the Apple  ID.
///   </li>
///   <li>
///     If you haven’t created an CAS account and registered an app yet, now’s a great time to do so at <a href="https://cleveradssolutions.com">cleveradssolutions.com</a>.
///   </li>
///   <li>
///     In a real app, it is important that you use your actual CAS ID.
///   </li>
/// </ul>
- (CASMediationManager * _Nonnull)createWithCasId:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Adapter initialization stack trace:
/// <ol>
///   <li>
///     [getVersionAndVerify]
///   </li>
///   <li>
///     [getRequiredVersion]
///   </li>
///   <li>
///     [prepareSettings] for each [MediationInfo] in waterfall
///   </li>
///   <li>
///     [isEarlyInit] when true call step 6
///   </li>
///   <li>
///     [initBidding]
///   </li>
///   <li>
///     [getVerifyError]
///   </li>
///   <li>
///     [initMain]
///   </li>
///   <li>
///     [onInitialized] || [onInitializeDelayed] after initialization done
///   </li>
///   <li>
///     [initBanner], [initInterstitial], [initRewarded] for each [MediationInfo] in waterfall
///   </li>
/// </ol>
SWIFT_CLASS_NAMED("CASMediationAdapter")
@interface CASMediationAdapter : NSObject
- (nonnull instancetype)init;
@end


SWIFT_CLASS_NAMED("CASMediationManager")
@interface CASMediationManager : NSObject
/// Weak event on <code>CASType</code> load response.
@property (nonatomic, weak) id <CASLoadDelegate> _Nullable adLoadDelegate;
@property (nonatomic, readonly, copy) NSString * _Nonnull managerID;
@property (nonatomic, readonly) BOOL isDemoAdMode;
/// The latest free ad page to your own promotion.
/// This ad page will be displayed when there is no paid ad to show or internet availability.
/// By default, this page will not be displayed while the ad content is NIL.
/// <code>CASLastPageAdContent.destinationURL</code> should always have a non-empty URL.
/// attention:
/// Impressions and clicks of this ad page will not be billed.
@property (nonatomic, strong) CASLastPageAdContent * _Nullable lastPageAdContent;
/// Check is visible <code>CASType.interstitial</code>or <code>CASType.Rewarded</code> right now.
@property (nonatomic, readonly) BOOL isFullscreenAdVisible;
/// Manual load Interstitial Ad.
/// Please call load before each show ad.
/// You can get a callback for the successful loading of an ad when set <code>adLoadDelegate</code>
/// attention:
/// You should only use this method <code>if CASSettings.getLoadingMode() == CASLoadingManagerMode.manual</code> is active.
- (void)loadInterstitial;
/// Check if Interstitial ad is ready to be shown.
@property (nonatomic, readonly) BOOL isInterstitialReady;
/// Shows the Interstitial ad if available.
/// \param controller The controller from which the Interstitial ad should be shown.
///
/// \param callback The callback for Interstitial ad events.
///
- (void)presentInterstitialFromRootViewController:(UIViewController * _Nonnull)controller callback:(id <CASCallback> _Nullable)callback;
/// Manual load Rewarded Video Ad.
/// Please call load before each show ad.
/// You can get a callback for the successful loading of an ad when set <code>adLoadDelegate</code>
/// attention:
/// You should only use this method <code>if CASSettings.getLoadingMode() == CASLoadingManagerMode.manual</code> is active.
- (void)loadRewardedAd;
/// Check if Rewarded ad is ready to be shown.
@property (nonatomic, readonly) BOOL isRewardedAdReady;
/// Shows the Rewarded video ad if available.
/// \param controller The controller from which the Interstitial ad should be shown.
///
/// \param callback The callback for Interstitial ad events.
///
- (void)presentRewardedAdFromRootViewController:(UIViewController * _Nonnull)controller callback:(id <CASCallback> _Nullable)callback;
/// Ad [type] is processing.
- (BOOL)isEnabledWithType:(enum CASType)type SWIFT_WARN_UNUSED_RESULT;
/// Set [enabled] ad [type] to processing.
/// The state will not be saved between sessions.
- (void)setEnabled:(BOOL)enabled type:(enum CASType)type;
/// The Return Ad which is displayed once the user returns to your application after a certain period of time.
/// To minimize the intrusiveness, short time periods are ignored.
/// Return ads are disabled by default.
- (void)enableAppReturnAdsWith:(id <CASAppReturnDelegate> _Nonnull)delegate;
/// Disables App Return Ads
- (void)disableAppReturnAds;
/// Calling this method will indicate to skip one next ad impression when returning to the app.
/// You can call this method when you intentionally redirect the user to another application (for example App Store)
/// and do not want them to see ads when they return to your application.
- (void)skipNextAppReturnAds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("CASNetwork")
@interface CASNetwork : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull googleAds;)
+ (NSString * _Nonnull)googleAds SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vungle;)
+ (NSString * _Nonnull)vungle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kidoz;)
+ (NSString * _Nonnull)kidoz SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull chartboost;)
+ (NSString * _Nonnull)chartboost SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull unityAds;)
+ (NSString * _Nonnull)unityAds SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appLovin;)
+ (NSString * _Nonnull)appLovin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull superAwesome;)
+ (NSString * _Nonnull)superAwesome SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull adColony;)
+ (NSString * _Nonnull)adColony SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull meta;)
+ (NSString * _Nonnull)meta SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inMobi;)
+ (NSString * _Nonnull)inMobi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull myTarget;)
+ (NSString * _Nonnull)myTarget SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull crossPromo;)
+ (NSString * _Nonnull)crossPromo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ironSource;)
+ (NSString * _Nonnull)ironSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull yandexAds;)
+ (NSString * _Nonnull)yandexAds SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tapjoy;)
+ (NSString * _Nonnull)tapjoy SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull digitalTurbine;)
+ (NSString * _Nonnull)digitalTurbine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mintegral;)
+ (NSString * _Nonnull)mintegral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pangle;)
+ (NSString * _Nonnull)pangle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hyprMX;)
+ (NSString * _Nonnull)hyprMX SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull adMob;)
+ (NSString * _Nonnull)adMob SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebookAN;)
+ (NSString * _Nonnull)facebookAN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fyber;)
+ (NSString * _Nonnull)fyber SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull max;)
+ (NSString * _Nonnull)max SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fairBid;)
+ (NSString * _Nonnull)fairBid SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lastPageAd;)
+ (NSString * _Nonnull)lastPageAd SWIFT_WARN_UNUSED_RESULT;
/// Advertising Tracking Enabled for Audience Network
/// Set the <code>FBAdSettings.setAdvertiserTrackingEnabled</code> flag.
/// The setAdvertiserTrackingEnabled “1” flag allows you to inform Audience Network whether to use the data to deliver personalized ads in line with your own legal obligations,
/// platform terms, and commitments you’ve made to your users.
/// If the flag is set to “0” we will not be able to deliver personalized ads.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebookAdvertiserTracking;)
+ (NSString * _Nonnull)facebookAdvertiserTracking SWIFT_WARN_UNUSED_RESULT;
/// Facebook Data Processing Options for Users in California
/// Set the <code>FBAdSettings.setDataProcessingOptions</code> flag.
/// Values:
/// <ul>
///   <li>
///     “”  - To explicitly not enable Limited Data Use (LDU) mode
///   </li>
///   <li>
///     “LDU”  - To enable LDU mode using geolocation
///   </li>
///   <li>
///     “LDU_1_1000”  - To enable LDU for users and specify user geography
///   </li>
/// </ul>
/// For information about how to implement Facebook’s Limited Data Use flag in California, visit Facebook’s developer documentation.
/// https://developers.facebook.com/docs/marketing-apis/data-processing-options
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebookDataProcessing;)
+ (NSString * _Nonnull)facebookDataProcessing SWIFT_WARN_UNUSED_RESULT;
/// Sets the publish IDFV flag
/// This value is persistent and so may be set once.
/// Default value is “1”.
/// if “0” no publish the IDFV value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vunglePublishIDFV;)
+ (NSString * _Nonnull)vunglePublishIDFV SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getActiveNetworkPattern SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)getActiveNetworks SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isActiveNetwork:(NSString * _Nonnull)network SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)values SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, CASPriceAccuracy, "CASPriceAccuracy", open) {
/// eCPM floor, also known as minimum eCPMs
  CASPriceAccuracyFloor = 0,
/// eCPM is the exact and committed value per 1000 impressions.
  CASPriceAccuracyBid = 1,
/// When the demand source does not agree to disclose the payout of every impression - in such cases the cpm is ‘0’
  CASPriceAccuracyUndisclosed = 2,
};


SWIFT_CLASS_NAMED("CASSettings")
@interface CASSettings : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// GDPR user Consent SDK Implementation for ads on session.
/// Default CASConsentStatus undefined
- (enum CASConsentStatus)getUserConsent SWIFT_WARN_UNUSED_RESULT;
/// GDPR user Consent SDK Implementation for ads on session.
/// Default CASConsentStatus undefined
- (void)updateUserWithConsent:(enum CASConsentStatus)consent;
/// Whether or not user has opted out of the sale of their personal information.
/// Default CASCCPAStatus undefined
- (enum CASCCPAStatus)getCCPAStatus SWIFT_WARN_UNUSED_RESULT;
/// Whether or not user has opted out of the sale of their personal information.
/// Default CASCCPAStatus undefined
- (void)updateCCPAWithStatus:(enum CASCCPAStatus)status;
/// Ad filters by Audience
/// Default: Tagged Mixed Audience
- (enum CASAudience)getTaggedAudience SWIFT_WARN_UNUSED_RESULT;
/// Ad filters by Audience
/// Default: Tagged Mixed Audience
- (void)setTaggedWithAudience:(enum CASAudience)audience;
/// The SDK automatically collects location data if the user allowed the app to track the location.
- (BOOL)isTrackLocationEnabled SWIFT_WARN_UNUSED_RESULT;
/// The SDK automatically collects location data if the user allowed the app to track the location.
/// Disabled by default.
/// \param enabled Enables or disables collecting location data.
///
- (void)setTrackLocationWithEnabled:(BOOL)enabled;
/// Interval display banner between load next ad in seconds.
/// Default: 30 seconds.
- (NSInteger)getBannerRefreshInterval SWIFT_WARN_UNUSED_RESULT;
/// Set the number of seconds an ad is displayed before a new ad is shown.
/// After the interval has passed, a new advertisement will be automatically loaded.
/// <code>CASBannerView.refreshInterval</code> will override this value for a specific view.
/// Default: 30 seconds.
- (void)setBannerRefreshWithInterval:(NSInteger)interval;
/// The interval between impressions Interstitial Ad in seconds.
/// Default: 0 seconds.
- (NSInteger)getInterstitialInterval SWIFT_WARN_UNUSED_RESULT;
/// The interval between impressions Interstitial Ad in seconds.
/// Default: 0 seconds.
/// Use <code>restartInterstitialInterval()</code> for restart interval until next Interstitial ad display.
- (void)setInterstitialWithInterval:(NSInteger)interval;
/// Restart interval until next Interstitial ad display.
/// By default, the interval before first Interstitial Ad impression is ignored.
/// You can use this method to delay displaying ad.
- (void)restartInterstitialInterval;
/// Indicates if the application’s audio is muted. Affects initial mute state for
/// all ads. Use this method only if your application has its own volume controls
/// (e.g., custom music or sound effect muting).
/// Disabled by default.
- (BOOL)isMutedAdSounds SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the application’s audio is muted. Affects initial mute state for
/// all ads. Use this method only if your application has its own volume controls
/// (e.g., custom music or sound effect muting).
/// Disabled by default.
- (void)setMuteAdSoundsTo:(BOOL)muted;
/// This option will compare ad cost and serve regular interstitial ads
/// when rewarded video ads are expected to generate less revenue.
/// Enabled by default.
/// attention:
/// Interstitial Ads does not require to watch the video to the end,
/// but the <code>CASCallback.didCompletedAd</code> callback will be triggered in any case.
- (void)setInterstitialAdsWhenVideoCostAreLowerWithAllow:(BOOL)allow;
/// This option will compare ad cost and serve regular interstitial ads
/// when rewarded video ads are expected to generate less revenue.
/// Enabled by default.
/// attention:
/// Interstitial Ads does not require to watch the video to the end,
/// but the <code>CASCallback.didCompletedAd</code> callback will be triggered in any case.
- (BOOL)isInterstitialAdsWhenVideoCostAreLowerAllowed SWIFT_WARN_UNUSED_RESULT;
/// The enabled Debug Mode will display a lot of useful information for debugging about the states of the sdk with tag CAS.
/// Disabling Debug Mode may improve application performance.
/// Disabled by default.
- (BOOL)isDebugMode SWIFT_WARN_UNUSED_RESULT;
/// The enabled Debug Mode will display a lot of useful information for debugging about the states of the sdk with tag CAS.
/// Disabling Debug Mode may improve application performance.
/// Disabled by default.
- (void)setDebugMode:(BOOL)enabled;
/// Identifiers corresponding to test devices which will always request test ads.
/// List of test devices should be defined before first MediationManager initialized.
/// <ol>
///   <li>
///     Run an app configured with the CAS SDK.
///   </li>
///   <li>
///     Check the console or logcat output for a message that looks like this:
///     “To get test ads on this device, set … “
///   </li>
///   <li>
///     Copy your alphanumeric test device ID to your clipboard.
///   </li>
///   <li>
///     Modify your code to set the test device ID before CAS manager initialize.
///   </li>
///   <li>
///     Re-run your app.
///   </li>
///   <li>
///     Well done, ads on this device are safe to click. Requests, impressions, and clicks on ads in test mode will not show up in your account’s reports.
///   </li>
/// </ol>
- (void)setTestDeviceWithIds:(NSArray<NSString *> * _Nonnull)ids;
/// Mediation loading manager mode.
/// Default: <code>CASLoadingManagerMode.optimal</code>
- (enum CASLoadingManagerMode)getLoadingMode SWIFT_WARN_UNUSED_RESULT;
/// Mediation loading manager mode.
/// Default: <code>CASLoadingManagerMode.optimal</code>
- (void)setLoadingWithMode:(enum CASLoadingManagerMode)mode;
/// Sets CAS analytics collection is enabled for this app on this device.
/// This setting is persisted across app sessions.
/// By default it is disabled.
- (BOOL)isAnalyticsCollectionEnabled SWIFT_WARN_UNUSED_RESULT;
/// Sets CAS analytics collection is enabled for this app on this device.
/// This setting is persisted across app sessions.
/// By default it is disabled.
/// warning:
/// Required set <code>CASAnalyticsHandler</code> instance to <code>CASAnalytics.handler</code> property.
- (void)setAnalyticsCollectionWithEnabled:(BOOL)enabled;
@end


@class UIWindow;

SWIFT_CLASS_NAMED("CASSize")
@interface CASSize : NSObject
@property (nonatomic, readonly) CGFloat width;
@property (nonatomic, readonly) CGFloat height;
/// Standard banner size 320dp width and 50dp height
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSize * _Nonnull banner;)
+ (CASSize * _Nonnull)banner SWIFT_WARN_UNUSED_RESULT;
/// Leaderboard banner size 728dp width and 90dp height
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSize * _Nonnull leaderboard;)
+ (CASSize * _Nonnull)leaderboard SWIFT_WARN_UNUSED_RESULT;
/// Medium Rectangle size 300dp width and 250dp height
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSize * _Nonnull mediumRectangle;)
+ (CASSize * _Nonnull)mediumRectangle SWIFT_WARN_UNUSED_RESULT;
/// Typically, Smart Banners on phones have a <code>banner</code> size.
/// Or on tablets a <code>leaderboard</code> size.
+ (CASSize * _Nonnull)getSmartBanner SWIFT_WARN_UNUSED_RESULT;
/// Inline adaptive banners are larger, taller banners compared to anchored adaptive banners.
/// They are of variable height, and can be as tall as the device screen.
/// <ul>
///   <li>
///     The height of adaptive banners cannot be less than 32 points.
///   </li>
///   <li>
///     The inline adaptive banners use fixed aspect ratios instead of fixed heights.
///   </li>
///   <li>
///     You must know the width of the view that the ad will be placed in,
///     and this should take into account the device width and any safe areas that are applicable.
///   </li>
///   <li>
///     The inline adaptive banner sizes are designed to work best when using the full available width.
///     In most cases, this will be the full width of the screen of the device in use.
///     Be sure to take into account applicable safe areas.
///   </li>
/// </ul>
+ (CASSize * _Nonnull)getInlineBannerWithWidth:(CGFloat)width maxHeight:(CGFloat)maxHeight SWIFT_WARN_UNUSED_RESULT;
/// Create Adaptive AdSize placed in container for current screen orientation.
/// <ul>
///   <li>
///     The height of adaptive banners cannot be less than 50 points and more than 250 points.
///   </li>
///   <li>
///     The adaptive banners use fixed aspect ratios instead of fixed heights.
///   </li>
/// </ul>
+ (CASSize * _Nonnull)getAdaptiveBannerInContainer:(UIView * _Nonnull)inContainer SWIFT_WARN_UNUSED_RESULT;
/// Create Adaptive AdSize with window width for current orientation.
/// <ul>
///   <li>
///     The height of adaptive banners cannot be less than 50 points and more than 250 points.
///   </li>
///   <li>
///     The adaptive banners use fixed aspect ratios instead of fixed heights.
///   </li>
/// </ul>
+ (CASSize * _Nonnull)getAdaptiveBannerInWindow:(UIWindow * _Nonnull)inWindow SWIFT_WARN_UNUSED_RESULT;
/// Create Adaptive AdSize with Max Width for current screen orientation.
/// <ul>
///   <li>
///     The height of adaptive banners cannot be less than 50 points and more than 250 points.
///   </li>
///   <li>
///     The width of adaptive banners cannot be less than 300 points.
///   </li>
///   <li>
///     The adaptive banners use fixed aspect ratios instead of fixed heights.
///   </li>
/// </ul>
+ (CASSize * _Nonnull)getAdaptiveBannerForMaxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT;
- (CGSize)toCGSize SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isAdaptive;
@property (nonatomic, readonly) BOOL isInline;
- (CASSize * _Nullable)findClosestSize SWIFT_WARN_UNUSED_RESULT;
/// Format: (width, height)
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions17CASStatusDelegate_")
@protocol CASStatusDelegate
- (void)onAdStatusChanged:(id <CASStatusHandler> _Nonnull)status;
@end

enum Gender : NSInteger;

SWIFT_CLASS_NAMED("CASTargetingOptions")
@interface CASTargetingOptions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(CASTargetingOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// The user’s gender
- (void)setGender:(enum Gender)gender;
/// The user’s gender
- (enum Gender)getGender SWIFT_WARN_UNUSED_RESULT;
/// The user’s age
/// Limitation: 1-99 and 0 is ‘unknown’
- (void)setAge:(NSInteger)age;
/// The user’s age
- (NSInteger)getAge SWIFT_WARN_UNUSED_RESULT;
/// The user’s current location.
/// Location data is not used to CAS; however, it may be used by 3rd party ad networks.
/// Do not use Location just for advertising.
/// Your app should have a valid use case for it as well.
- (void)setLocationWithLatitude:(double)latitude longitude:(double)longitude;
- (void)clearLocation;
@end

typedef SWIFT_ENUM(NSInteger, Gender, open) {
  GenderUnknown = 0,
  GenderMale = 1,
  GenderFemale = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, CASType, "CASType", open) {
  CASTypeBanner = 0,
  CASTypeInterstitial = 1,
  CASTypeRewarded = 2,
  CASTypeNative = 3,
  CASTypeNone = 4,
};


SWIFT_CLASS("_TtC18CleverAdsSolutions10CASTypeInt")
@interface CASTypeInt : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSUInteger none;)
+ (NSUInteger)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSUInteger banner;)
+ (NSUInteger)banner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSUInteger interstitial;)
+ (NSUInteger)interstitial SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSUInteger rewarded;)
+ (NSUInteger)rewarded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSUInteger native;)
+ (NSUInteger)native SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSUInteger everything;)
+ (NSUInteger)everything SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
