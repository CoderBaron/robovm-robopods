package: org.robovm.pods.clearads
include: [foundation, uikit, coregraphics, coreanimation]
framework: CleverAdsSolutions
clang_args: ['-x', 'objective-c']
headers:
    - "#import <UIKit/UIKit.h>"
    - CleverAdsSolutions.h
    - CleverAdsSolutions-Swift.h

private_typedefs: {}

typedefs: {}

enums:
    CASTypeFlags: { }
    CASAudience: { }
    CASCCPAStatus: { }
    CASConsentStatus: { }
    CASError: { nserror: true }
    CASLoadingManagerMode: { }
    CASPriceAccuracy: { }
    CASType: { }
    CASConsentFlowStatus: {}
    CASNetworkId: {}
    CASUserDebugGeography: { }
    CASGender: { }
classes:
    CAS:
        methods:
            '+createWithManagerID:onInit:':
                name: createMediationManager
            '+createWithManagerID:enableTypes:demoAdMode:onInit:':
                name: createMediationManager
            '+createWithManagerID:enableTypes:demoAdMode:mediationExtras:onInit:':
                name: createMediationManager
    CASAnalytics: { }
    CASAppOpen:
        methods:
            '-loadAdWithOrientation:completionHandler:':
                name: loadAd
            '+createWithManagerId:':
                name: create
                constructor: true
            '+createWithManager:':
                name: create
                constructor: true
            '-loadAdWithCompletionHandler:':
                name: loadAd
    CASBannerInternal: { }
    CASBannerView:
        methods:
            '-initWithAdSize:manager:':
                name: init
            '-initWithAdSize:origin:manager:':
                name: init
            '-initWithManager:':
                name: init
    CASBridgeToBUnit: { }
    CASException:
        skip_def_constructor: true
    CASInitialConfig: { }
    CASInternalUtils:
        methods:
            '+tryFirebaseLogEvent:map:':
                name: tryFirebaseLogEvent
            '+tryTenjinLogEvent:json:':
                name: tryTenjinLogEvent
    CASLastPageAdContent:
        methods:
            '-initWithHeadline:adText:destinationURL:imageURL:iconURL:':
                name: init
    CASManagerBuilder:
        methods:
            '-withMediationExtras:forKey:':
                name: withMediationExtras
            '-withFramework:version:':
                name: withFramework
            '-createWithCasId:':
                name: createMediationManager
    CASMediationAdapter: { }
    CASMediationManager:
        methods:
            '-presentInterstitialFromRootViewController:callback:':
                name: presentInterstitial
            '-presentRewardedAdFromRootViewController:callback:':
                name: presentRewardedAd
            '-isEnabledWithType:':
                name: isEnabled
            '-setEnabled:type:':
                name: setEnabled
            '-enableAppReturnAdsWith:':
                name: enableAppReturnAds
            '-isAdReadyWithType:':
                name: isAdReady
            '-showFromRootViewController:type:callback:':
                name: show
            '-getLastActiveMediationWithType:':
                name: getLastActiveMediation
            '-isValidCallbackWithType:callback:':
                name: isValidCallback
    CASMediationUnit: { }
    CASNetwork: { }
    CASRequestUnit: { }
    CASSettings:
        methods:
            '-updateUserWithConsent:':
                name: updateUser
            '-updateCCPAWithStatus:':
                name: updateCCPA
            '-setTaggedWithAudience:':
                name: setTagged
            '-setTrackLocationWithEnabled:':
                name: setTrackLocation
            '-setBannerRefreshWithInterval:':
                name: setBannerRefresh
            '-setInterstitialWithInterval:':
                name: setInterstitial
            '-setInterstitialAdsWhenVideoCostAreLowerWithAllow:':
                name: setInterstitialAdsWhenVideoCostAreLower
            '-setTestDeviceWithIds:':
                name: setTestDevice
            '-setLoadingWithMode:':
                name: setLoading
            '-setAnalyticsCollectionWithEnabled:':
                name: setAnalyticsCollection
            '-setPluginPlatformWithName:version:':
                name: setPluginPlatform
            '-getUserConsent':
                exclude: true # conflicts with property
            '-getTaggedAudience':
                exclude: true # conflicts with property
            '-isDebugMode':
                exclude: true # conflicts with property
            '-isMutedAdSounds':
                exclude: true # conflicts with property
            '-getBannerRefreshInterval':
                exclude: true # conflicts with property
            '-getInterstitialInterval':
                exclude: true # conflicts with property
    CASSize:
        methods:
            '+getInlineBannerWithWidth:maxHeight:':
                name: getInlineBanner
    CASTargetingOptions:
        methods:
            '-initWithOptions:':
                name: init
            '-setLocationWithLatitude:longitude:':
                name: setLocation
    CASTypeInt:
        methods:
            '+native':
                name: typeNative
    CASConsentFlow:
        methods:
            '-initWithEnabled:':
                name: init
    CASNativeAdContent: { }
    CASNativeView:
        methods:
            '-setNativeAd:error:':
                name: setNativeAd
                throws: NSErrorException

    CASBiddingUnit: { }
    CASChoicesView: { }
    CASMediaView: { }
    CASMediationAgent: { }
    CASMediationBannerAgent: { }
    CASMediationNativeAdContent: { }
    CASStarRatingView: { }
    CASConsentPlatform: { }
protocols:
    CASAdapterFactory: { }
    CASAnalyticsDelegate:
        methods:
            '-analyticsEvent:map:':
                name: analyticsEvent
    CASAnalyticsHandler:
        methods:
            '-log::':
                name: log
    CASAppReturnDelegate: { }
    CASBannerDelegate:
        methods:
            '-bannerAdView:didFailWith:':
                name: didFail
            '-bannerAdView:willPresent:':
                name: willPresent
    CASCallback:
        methods:
            '-willShownWithAd:':
                name: willShown
            '-didShowAdFailedWithError:':
                name: didShowAdFailed
    CASLoadDelegate:
        methods:
            '-onAdFailedToLoad:withError:':
                name: onAdFailedToLoad
    CASStatusDelegate: { }
    CASStatusHandler: { }
    CASPaidCallback: {}
    CASNativeAdStarRating: {}
functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Function_#{g[0]}'

values:
    CleverAdsSolutionsVersionNumber:
        class: CAS
        name: getVersionNumber
        readonly: true
    CleverAdsSolutionsVersionString:
        class: CAS
        name: getVersionString

    # Make sure we don't miss any values if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Value_#{g[0]}'

constants:
    SWIFT_(.*):
        exclude: true
    CASErrorDomain:
        class: CASError
        name: ErrorDomain
    CAS_FRAMEWORK_(VERSION|CODE):
        class: CAS
        name: 'FRAMEWORK_#{g[0]}'

    # Make sure we don't miss any values if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: '#{g[0]}'
