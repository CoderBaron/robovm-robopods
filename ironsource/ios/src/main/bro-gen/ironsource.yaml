package: org.robovm.pods.ironsource
framework: IronSource
include: [foundation, uikit, coregraphics, coreanimation]
clang_args: ['-x', 'objective-c']
headers: 
    - IronSource.h

enums:
    LogLevelValues: {prefix: IS_LOG_}
    LogTagValue: {prefix: TAG_}
    ISGender: {prefix: IRONSOURCE_USER_}
    DebugLevel: {}
    ISAdapterErrorType: {}
    ISLoadWhileShowSupportState: {prefix: LOAD_WHILE_SHOW_}
    ISAdapterErrors: {prefix: ISAdapterError}
    ISErrorCode: {}
    ISAdOptionsPosition: { }
    ISMetaDataValueTypes: { prefix: META_DATA_VALUE_ }
    ISNLogLevel: { prefix: ISNLog }
    ISNLogTag: { prefix: ISN_TAG_ }

private_typedefs:
    "MessageToNative *": NSObject
    "MessageToController *": NSObject
    "CallbackToNative *": NSObject

classes:
    ISAdData:
        methods:
            '-initWithData:configuration:':
                name: init
            '-initWithServerData:configuration:adUnitData:':
                name: init
            '-getAdUnitData':
                exclude: true # conflicts with same property
            '+adDataWithAdapterConfiguration:adUnit:userId:':
                name: create
                constructor: true
            '+adDataWithAdapterConfiguration:adUnit:userId:bannerSize:':
                name: create
                constructor: true
    ISAdUnit:
        methods:
            '-initWithValue:':
                name: init
    ISAdapterConfig:
        methods:
            '-initWithProviderName:':
                name: init
    ISBannerSize:
        methods:
            '-initWithWidth:andHeight:':
                name: init
            '-initWithDescription:width:height:':
                name: init
            '+getMaximalAdaptiveHeightWithWidth:':
                name: getMaximalAdaptiveHeight
    ISBannerView: {}
    ISBaseAdAdapter:
        methods:
            '-initWithAdUnit:adapterConfig:':
                name: init
            '-initWithAdUnit:adapterConfig:adUnitObjectId:':
                name: init
    ISBaseAdInteractionAdapter: {}
    ISBaseInterstitial:
        methods:
            '-loadAdWithAdData:delegate:':
                name: loadAd
            '-showAdWithViewController:adData:delegate:':
                name: showAd
    ISBaseNetworkAdapter: {}
    ISBaseRewardedVideo:
        methods:
            '-loadAdWithAdData:delegate:':
                name: loadAd
            '-showAdWithViewController:adData:delegate:':
                name: showAd
    ISConfigurations: {}
    ISDataKeys: {}
    ISEventsReporting: {}
    ISImpressionData:
        methods:
            '-initWithDictionary:':
                name: init
            '-initWithImpressionData:':
                name: init
            '-replacePlacementMacro:value:':
                name: replacePlacementMacro
    ISIntegrationHelper: {}
    ISPlacementInfo:
        methods:
            '-initWithPlacement:reward:rewardAmount:':
                name: init
    ISSegment:
        methods:
            '-setCustomValue:forKey:':
                name: setCustomValue
    ISSupersonicAdsConfiguration: {}
    IronSource:
        methods:
            '+setMetaDataWithKey:value:':
                name: setMetaData
            '+setMetaDataWithKey:values:':
                name: setMetaData
            '+setNetworkDataWithNetworkKey:andNetworkData:':
                name: setNetworkData
            '+initWithAppKey:':
                name: init
            '+initWithAppKey:delegate:':
                name: init
            '+initWithAppKey:adUnits:':
                name: init
            '+initWithAppKey:adUnits:delegate:':
                name: init
            '+initISDemandOnly:adUnits:':
                name: initISDemandOnly
            '+showRewardedVideoWithViewController:':
                name: showRewardedVideo
            '+showRewardedVideoWithViewController:placement:':
                name: showRewardedVideo
            '+loadISDemandOnlyRewardedVideoWithAdm:adm:':
                name: loadISDemandOnlyRewardedVideo
            '+showISDemandOnlyRewardedVideo:instanceId:':
                name: showISDemandOnlyRewardedVideo
            '+showInterstitialWithViewController:':
                name: showInterstitial
            '+showInterstitialWithViewController:placement:':
                name: showInterstitial
            '+loadISDemandOnlyInterstitialWithAdm:adm:':
                name: loadISDemandOnlyInterstitial
            '+showISDemandOnlyInterstitial:instanceId:':
                name: showISDemandOnlyInterstitial
            '+showOfferwallWithViewController:':
                name: showOfferwallWithViewController$
            '+showOfferwallWithViewController:placement:':
                name: showOfferwall
            '+loadBannerWithViewController:size:':
                name: loadBanner
            '+loadBannerWithViewController:size:placement:':
                name: loadBanner
            '+loadISDemandOnlyBannerWithInstanceId:adm:viewController:size:':
                name: loadISDemandOnlyBanner
            '+setAdRevenueDataWithDataSource:impressionData:':
                name: setAdRevenueData
            '+setConsentViewWithDelegate:':
                name: setConsentView
            '+loadConsentViewWithType:':
                name: loadConsentView
            '+showConsentViewWithViewController:andType:':
                name: showConsentView
            '+loadISDemandOnlyBannerWithAdm:instanceId:viewController:size:':
                name: loadISDemandOnlyBanner
            '+loadISDemandOnlyBannerWithInstanceId:viewController:size:':
                name: loadISDemandOnlyBanner
            '+destroyISDemandOnlyBannerWithInstanceId:':
                name: destroyISDemandOnlyBanner
            '+setISDemandOnlyBannerDelegate:forInstanceId:':
                name: setISDemandOnlyBannerDelegate
            '+setWaterfallConfiguration:forAdUnit:':
                name: setWaterfallConfiguration
    ISWaterfallConfiguration: {}
    ISWaterfallConfigurationBuilder: {}
    ISAdInfo:
        methods:
            '-initWithImpressionData:':
                name: init
    ISDemandOnlyBannerView: { }
    ISBaseBanner:
        methods:
            '-loadAdWithAdData:viewController:size:delegate:':
                name: loadAd
            '-destroyAdWithAdData:':
                name: destroyAd
    ISAdapterNativeAdViewBinder: { }
    ISError:
        skip_def_constructor: true
        methods:
            '+createError:withParams:':
                name: createError
            '+createError:withMessage:':
                name: createError
            '+createErrorWithDomain:code:message:':
                name: createError
            '+appendError:withPrefix:':
                name: appendErrorWithPrefix
            '+appendError:withSuffix:':
                name: appendErrorWithSuffix
    ISNativeAdDataImage:
        methods:
            '-initWithImage:url:':
                name: init
    ISNativeAdView: { }
    ISNativeAdViewHolder: { }
    LevelPlayMediaView: { }
    LevelPlayNativeAd:
        methods:
            '-initWithBuilder:':
                name: init
    LevelPlayNativeAdBuilder: { }

    ISAdapterNativeAdData: { }
    ISBaseAdUnitAdapter:
        methods:
            '-getStringValueFromAdapterConfig:forKey:':
                name: getStringValueFromAdapterConfig
            '-getMissingParamErrorStringWithKey:':
                name: getMissingParamErrorString
    ISBaseAdapter:
        methods:
            '-earlyInitWithAdapterConfig:':
                name: earlyInit
            '-getAdaptiveHeightWithWidth:':
                name: getAdaptiveHeight
            '-errorForMissingCredentialFieldWithName:':
                name: errorForMissingCredentialField
            '-setMetaDataWithKey:andValues:':
                name: setMetaData
    ISBaseBannerAdapter: { }
    ISBaseInterstitialAdapter: { }
    ISBaseNativeAdAdapter:
        methods:
            '-getNativeAdPropertiesWithAdapterConfig:':
                name: getNativeAdProperties
    ISBaseRewardedVideoAdapter: { }
    ISConcurrentMutableDictionary:
        methods:
            '-initCommon':
                static_constructor_name: createCommon
            '-initWithCapacity:':
                name: init
            '-initWithContentsOfFile:':
                name: init
            '-initWithContentsOfURL:':
                name: init
            '-initWithCoder:':
                name: init
            '-initWithDictionary:':
                name: init
            '-setObject:forKey:':
                name: setObject
            '+dictionaryWithDictionary:':
                exclude: true
    ISConcurrentMutableSet:
        methods:
            '-initCommon':
                static_constructor_name: createCommon
            '-initWithCapacity:':
                name: init
            '-initWithCoder:':
                name: init
            '-initWithSet:':
                name: init
            '-initWithArray:':
                name: init
            '+setWithSet:':
                exclude: true
    ISContainerParams:
        methods:
            '-initWithWidth:height:':
                name: init
    ISIronSourceAdapter: { }
    ISLog: { }
    ISLoggerManager:
        methods:
            '-setLoggingLevels:publisher:console:':
                name: setLoggingLevels
            '-log:level:tag:':
                name: log
            '-logFromError:level:tag:':
                name: log
            '-logFromException:level:tag:':
                name: log
            '-logFromException:message:level:tag:':
                name: log
            '-dynamicLog:message:level:withTag:':
                name: dynamicLog
            '-automationLog:level:withTag:':
                name: automationLog
    ISMetaData:
        methods:
            '-initWithKey:andValues:':
                name: init
            '-initWithKey:values:andValuesType:':
                name: init
    ISMetaDataUtils:
        methods:
            '+formatValue:forType:':
                name: formatValue
            '+formatMetaDataKey:andValues:':
                name: formatMetaDataKey
            '+isMetaDataKeyValid:error:':
                name: isMetaDataKeyValid
            '+isMetaDataValuesValid:error:':
                name: isMetaDataValuesValid
            '+isValidCCPAMetaDataWithKey:andValue:':
                name: isValidCCPAMetaData
            '+isValidMetaDataWithKey:flag:andValue:':
                name: isValidMetaData
    ISNAdViewsManagerSwiftFacade: { }
    ISNControllerManagerSwiftFacade:
        methods:
            '-sendMessage:callbackHandler:':
                name: sendMessage
            '-setControllerMessageListenerWithAdId:listener:':
                name: setControllerMessageListener
            '-removeControllerMessageListenerWithAdId:':
                name: removeControllerMessageListener
    ISNEvent:
        methods:
            '-initWithEventId:eventName:':
                name: init
    ISNEventTrackerWrapper: { }
    ISNSupersonicAdsPublisherSwiftFacade: { }
    ISNativeAdProperties:
        methods:
            '-initWithAdapterConfig:':
                name: init
    SupersonicLogManager:
        methods:
            '-log:withLevel:withTag:':
                name: log
            '-logWithNetworkPrefix:withLevel:withTag:':
                name: logWithNetworkPrefix
protocols:
    ISAdapterAdDelegate:
        methods:
            '-adDidFailToLoadWithErrorType:errorCode:errorMessage:':
                name: adDidFailToLoad
    ISAdapterAdInteractionDelegate:
        methods:
            '-adDidFailToShowWithErrorCode:errorMessage:':
                name: adDidFailToShow
    ISAdapterAdRewardedDelegate: {}
    ISAdapterBaseProtocol:
        methods:
            '-init:delegate:':
                exclude: true
    ISAdapterConsentProtocol: {}
    ISAdapterDebugProtocol: {}
    ISAdapterMetaDataProtocol:
        methods:
            '-setMetaDataWithKey:andValues:':
                name: setMetaData
    ISAdapterSettingsProtocol:
        methods:
            '-getLoadWhileShowSupportedStateWithAdapterConfig:':
                name: getLoadWhileShowSupportedState
    ISBannerDelegate:
        methods:
            '-bannerDidFailToLoadWithError:':
                name: bannerDidFailToLoad
    ISConsentViewDelegate:
        methods:
            '-consentViewDidFailToLoadWithError:consentViewType:':
                name: consentViewDidFailToLoad
            '-consentViewDidFailToShowWithError:consentViewType:':
                name: consentViewDidFailToShow
    ISDemandOnlyBannerDelegate:
        methods:
            '-bannerDidLoad:instanceId:':
                name: bannerDidLoad
            '-bannerDidFailToLoadWithError:instanceId:':
                name: bannerDidFailToLoad
    ISDemandOnlyInterstitialDelegate:
        methods:
            '-interstitialDidFailToLoadWithError:instanceId:':
                name: interstitialDidFailToLoad
            '-interstitialDidFailToShowWithError:instanceId:':
                name: interstitialDidFailToShow
    ISDemandOnlyRewardedVideoDelegate:
        methods:
            '-rewardedVideoDidFailToLoadWithError:instanceId:':
                name: rewardedVideoDidFailToLoad
            '-rewardedVideoDidFailToShowWithError:instanceId:':
                name: rewardedVideoDidFailToShow
    ISImpressionDataDelegate: {}
    ISInitializationDelegate: {}
    ISInterstitialAdDelegate: {}
    ISInterstitialDelegate:
        methods:
            '-interstitialDidFailToLoadWithError:':
                name: interstitialDidFailToLoad
            '-interstitialDidFailToShowWithError:':
                name: interstitialDidFailToShow
    ISLogDelegate:
        methods:
            '-sendLog:level:tag:':
                name: sendLog
    ISNetworkInitializationDelegate:
        methods:
            '-onInitDidFailWithErrorCode:errorMessage:':
                name: onInitDidFail
    ISOfferwallDelegate:
        methods:
            '-offerwallDidFailToShowWithError:':
                name: offerwallDidFailToShow
            '-didFailToReceiveOfferwallCreditsWithError:':
                name: didFailToReceiveOfferwallCredits
    ISRewardedVideoAdDelegate: {}
    ISRewardedVideoDelegate:
        methods:
            '-rewardedVideoDidFailToShowWithError:':
                name: rewardedVideoDidFailToShow
    ISRewardedVideoManualDelegate:
        methods:
            '-rewardedVideoDidFailToLoadWithError:':
                name: rewardedVideoDidFailToLoad
    ISSegmentDelegate: {}
    LevelPlayBannerDelegate:
        methods:
            '-didLoad:withAdInfo:':
                name: didLoad
            '-didFailToLoadWithError:':
                name: didFailToLoad
            '-didClickWithAdInfo:':
                name: didClick
            '-didLeaveApplicationWithAdInfo:':
                name: didLeaveApplication
            '-didPresentScreenWithAdInfo:':
                name: didPresentScreen
            '-didDismissScreenWithAdInfo:':
                name: didDismissScreen
    LevelPlayInterstitialDelegate:
        methods:
            '-didLoadWithAdInfo:':
                name: didLoad
            '-didFailToLoadWithError:':
                name: didFailToLoad
            '-didOpenWithAdInfo:':
                name: didOpen
            '-didShowWithAdInfo:':
                name: didShow
            '-didFailToShowWithError:andAdInfo:':
                name: didFailToShow
            '-didClickWithAdInfo:':
                name: didClick
            '-didCloseWithAdInfo:':
                name: didClose
    LevelPlayRewardedVideoAutomaticDelegate:
        methods:
            '-hasAdAvailableWithAdInfo:':
                name: hasAdAvailable
    LevelPlayRewardedVideoDelegate:
        methods:
            '-didReceiveRewardForPlacement:withAdInfo:':
                name: didReceiveReward
            '-didFailToShowWithError:andAdInfo:':
                name: didFailToShow
            '-didOpenWithAdInfo:':
                name: didOpen
            '-didClick:withAdInfo:':
                name: didClick
            '-didCloseWithAdInfo:':
                name: didClose
            '-hasAvailableAdWithAdInfo:':
                name: hasAvailableAd
    LevelPlayRewardedVideoManualDelegate:
        methods:
            '-didLoadWithAdInfo:':
                name: didLoad
            '-didFailToLoadWithError:':
                name: didFailToLoad
    LevelPlayRewardedVideoBaseDelegate:
        methods:
            '-didReceiveRewardForPlacement:withAdInfo:':
                name: didReceiveReward
            '-didFailToShowWithError:andAdInfo:':
                name: didFailToShow
            '-didOpenWithAdInfo:':
                name: didOpen
            '-didClick:withAdInfo:':
                name: didClick
            '-didCloseWithAdInfo:':
                name: didClose
    ISAdapterAdFullscreenProtocol:
        methods:
            '-loadAdWithAdData:delegate:':
                name: loadAd
            '-showAdWithViewController:adData:delegate:':
                name: showAd
            '-isAdAvailableWithAdData:':
                name: isAdAvailable
    ISAdapterAdViewDelegate:
        methods:
            '-adDidLoadWithView:':
                name: adDidLoad
    ISAdapterBannerProtocol:
        methods:
            '-loadAdWithAdData:viewController:size:delegate:':
                name: loadAd
            '-destroyAdWithAdData:':
                name: destroyAd
    ISBannerAdDelegate: { }
    ISAdapterNativeAdViewBinderProtocol: { }
    ISNativeAdDataProtocol: { }
    ISNativeAdInteractionDelegate:
        methods:
            '-didRecordImpression:withAdInfo:':
                name: didRecordImpression
            '-didClick:withAdInfo:':
                name: didClick
    ISNativeAdLoadDelegate:
        methods:
            '-didLoad:withAdInfo:':
                name: didLoad
            '-didFailToLoad:withError:':
                name: didFailToLoad
    ISNativeAdViewBinderProtocol: { }
    LevelPlayNativeAdDelegate: { }
    ISAdUnitAdapterProtocol: { }
    ISAppStoreErrorDelegate: { }
    ISBannerAdapterDelegate:
        methods:
            '-adapterBannerInitFailedWithError:':
                name: adapterBannerInitFailed
            '-adapterBannerDidFailToLoadWithError:':
                name: adapterBannerDidFailToLoad
    ISBannerAdapterProtocol:
        methods:
            '-destroyBannerWithAdapterConfig:':
                name: destroyBanner
            '-getAdaptiveHeightWithWidth:':
                name: getAdaptiveHeight
            '-initBannerWithUserId:adapterConfig:delegate:':
                name: initBanner
            '-loadBannerWithAdapterConfig:adData:viewController:size:delegate:':
                name: loadBanner
            '-getBannerBiddingDataWithAdapterConfig:adData:':
                name: getBannerBiddingData
            '-collectBannerBiddingDataWithAdapterConfig:adData:delegate:':
                name: collectBannerBiddingData
            '-initBannerForBiddingWithUserId:adapterConfig:delegate:':
                name: initBannerForBidding
            '-loadBannerForBiddingWithAdapterConfig:adData:serverData:viewController:size:delegate:':
                name: loadBannerForBidding
    ISBiddingDataAdapterProtocol: { }
    ISBiddingDataDelegate:
        methods:
            '-successWithBiddingData:':
                name: success
            '-failureWithError:':
                name: failure
    ISInterstitialAdapterDelegate:
        methods:
            '-adapterInterstitialInitFailedWithError:':
                name: adapterInterstitialInitFailed
            '-adapterInterstitialDidFailToLoadWithError:':
                name: adapterInterstitialDidFailToLoad
            '-adapterInterstitialDidFailToShowWithError:':
                name: adapterInterstitialDidFailToShow
    ISInterstitialAdapterProtocol:
        methods:
            '-showInterstitialWithViewController:adapterConfig:delegate:':
                name: showInterstitial
            '-hasInterstitialWithAdapterConfig:':
                name: hasInterstitial
            '-initInterstitialWithUserId:adapterConfig:delegate:':
                name: initInterstitial
            '-loadInterstitialWithAdapterConfig:adData:delegate:':
                name: loadInterstitial
            '-getInterstitialBiddingDataWithAdapterConfig:adData:':
                name: getInterstitialBiddingData
            '-collectInterstitialBiddingDataWithAdapterConfig:adData:delegate:':
                name: collectInterstitialBiddingData
            '-initInterstitialForBiddingWithUserId:adapterConfig:delegate:':
                name: initInterstitialForBidding
            '-loadInterstitialForBiddingWithAdapterConfig:adData:serverData:delegate:':
                name: loadInterstitialForBidding
    ISNAdViewsManagerSwiftFacade:
        name: ISNAdViewsManagerSwiftFacadeProtocol
    ISNAppStoreVCRootViewDelegate:
        methods:
            '-didReceiveOutOfAppStoreTouchWithType:':
                name: didReceiveOutOfAppStoreTouch
    ISNControllerMessageListener:
        methods:
            '-onReceiveWithMessage:':
                name: onReceive
    ISNEventTrackerInterface:
        methods:
            '-logEvent:data:':
                name: logEvent
    ISNativeAdAdapterDelegate:
        methods:
            '-adapterNativeAdInitFailedWithError:':
                name: adapterNativeAdInitFailed
            '-adapterNativeAdDidLoadWithAdData:adViewBinder:':
                name: adapterNativeAdDidLoad
            '-adapterNativeAdDidFailToLoadWithError:':
                name: adapterNativeAdDidFailToLoad
    ISNativeAdAdapterProtocol:
        methods:
            '-initNativeAdsWithUserId:adapterConfig:delegate:':
                name: initNativeAds
            '-initNativeAdForBiddingWithUserId:adapterConfig:delegate:':
                name: initNativeAdForBidding
            '-loadNativeAdWithAdapterConfig:adData:viewController:delegate:':
                name: loadNativeAdWithAdapterConfig
            '-loadNativeAdForBiddingWithAdapterConfig:adData:serverData:viewController:delegate:':
                name: loadNativeAdForBidding
            '-destroyNativeAdWithAdapterConfig:':
                name: destroyNativeAd
            '-getNativeAdBiddingDataWithAdapterConfig:adData:':
                name: getNativeAdBiddingData
            '-collectNativeAdBiddingDataWithAdapterConfig:adData:delegate:':
                name: collectNativeAdBiddingData
    ISNativeAdProtocol: { }
    ISNetworkInitCallbackProtocol: { }
    ISOfferwallAdapterDelegate:
        methods:
            '-adapterOfferwallHasChangedAvailability:withError:':
                name: adapterOfferwallHasChangedAvailability
            '-adapterOfferwallDidFailToShowWithError:':
                name: adapterOfferwallDidFailToShow
            '-adapterOfferwallDidFailToReceiveCreditsWithError:':
                name: adapterOfferwallDidFailToReceiveCredits
    ISOfferwallAdapterProtocol:
        methods:
            '-initOfferWallWithUserId:adapterConfig:delegate:':
                name: initOfferWall
            '-showOfferwallWithViewController:placement:':
                name: showOfferwall
            '-getOfferWallCreditsWithUserId:':
                name: getOfferWallCredits
    ISReleaseMemoryAdapterProtocol:
        methods:
            '-releaseMemoryWithAdapterConfig:':
                name: releaseMemory
    ISRewardedVideoAdapterDelegate:
        methods:
            '-adapterRewardedVideoDidFailToLoadWithError:':
                name: adapterRewardedVideoDidFailToLoad
            '-adapterRewardedVideoDidFailToShowWithError:':
                name: adapterRewardedVideoDidFailToShow
    ISRewardedVideoAdapterProtocol:
        methods:
            '-hasRewardedVideoWithAdapterConfig:':
                name: hasRewardedVideo
            '-showRewardedVideoWithViewController:adapterConfig:delegate:':
                name: showRewardedVideo
            '-initAndLoadRewardedVideoWithUserId:adapterConfig:adData:delegate:':
                name: initAndLoadRewardedVideo
            '-initRewardedVideoForCallbacksWithUserId:adapterConfig:delegate:':
                name: initRewardedVideoForCallbacks
            '-loadRewardedVideoWithAdapterConfig:adData:delegate:':
                name: loadRewardedVideo
            '-getRewardedVideoBiddingDataWithAdapterConfig:adData:':
                name: getRewardedVideoBiddingData
            '-collectRewardedVideoBiddingDataWithAdapterConfig:adData:delegate:':
                name: collectRewardedVideoBiddingData
            '-loadRewardedVideoForBiddingWithAdapterConfig:adData:serverData:delegate:':
                name: loadRewardedVideoForBidding
            '-initRewardedVideoForDemandOnlyWithUserId:adapterConfig:delegate:':
                name: initRewardedVideoForDemandOnly
            '-loadRewardedVideoForDemandOnlyWithAdapterConfig:delegate:':
                name: loadRewardedVideoForDemandOnly
            '-loadRewardedVideoForDemandOnlyForBiddingWithAdapterConfig:serverData:delegate:':
                name: loadRewardedVideoForDemandOnlyForBidding
    ISSetAPSDataProtocol:
        methods:
            '-setAPSDataWithAdUnit:apsData:':
                name: setAPSData
functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Function_#{g[0]}'

values:

    # Make sure we don't miss any values if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Value_#{g[0]}'

constants:
    DEFAULT_CAPPING_(.*):
        class: ISAdapterConfig
        name: 'DEFAULT_CAPPING_#{g[0]}'
    (IS_REWARDED_VIDEO|IS_INTERSTITIAL|IS_OFFERWALL|IS_BANNER|IS_NATIVE_AD):
        class: IronSource
        name: '#{g[0]}'
    MEDIATION_SDK_VERSION:
        class: IronSource
        name: 'getSdkVersion'
    DataSource_MOPUB:
        class: IronSource
    kBannerWillMoveToSuperView:
        class: ISBannerView
    kImpressionDataKey(.*):
        class: ISImpressionData
        static_class: Keys
        name: '#{g[0]}'
    kSSErrors(.*):
        class: ISError
        static_class: Consts
        name: '#{g[0]}'
    kMetaData(.*):
        class: ISMetaData
        static_class: Consts
        name: '#{g[0]}'
    kAdOptionsPosKey:
        class: ISAdOptionsPosition
        name: getAdOptionsPosKey

    kEmptyString:
        exclude: true

    kSize(.*):
        class: ISBannerSize
    GitHash:
        exclude: true

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (.*):
        class: __FixMe
        name: 'Constant__#{g[0]}'
